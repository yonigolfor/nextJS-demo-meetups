{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Play\\\\Desktop\\\\JSworks\\\\warmUp\\\\reactProjects\\\\next-meetup-project\\\\pages\\\\[meetupId]\\\\index.js\";\n// localhost:3000/meetupId\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nexport default function MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: \"https://i.guim.co.uk/img/media/3f183e3024872dc0280012487854dc5807048166/0_42_3600_2160/master/3600.jpg?width=1140&dpr=2&s=none\",\n    title: \"Cristiano Celebrating\",\n    address: \"Amir Gilbow, Tel Aviv\",\n    description: \"First meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  // Added only at dynamic paths. Define here all Dynamic Values for re-generate.\n  const client = await MongoClient.connect(\"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // take all the meetups ids\n\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false // Do you define all options? False -> yes\n\n  };\n}\nexport async function getStaticProps(context) {\n  // can fetch data securely. this code will not appear in client-side.\n  // This code will not appear even in other clients machines!\n  // fetch data for single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // take all the meetups ids\n\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: meetupId\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        img: \"https://i.guim.co.uk/img/media/3f183e3024872dc0280012487854dc5807048166/0_42_3600_2160/master/3600.jpg?width=1140&dpr=2&s=none\",\n        id: meetupId,\n        title: \"Cristiano Celebrating\",\n        address: \"Amir Gilbow, Tel Aviv\",\n        description: \"First meetup\"\n      }\n    },\n    revalidate: 1\n  };\n}","map":{"version":3,"sources":["C:/Users/Play/Desktop/JSworks/warmUp/reactProjects/next-meetup-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","selectedMeetup","findOne","props","meetupData","img","id","title","address","description","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,sBACE,QAAC,YAAD;AACE,IAAA,GAAG,EACD,gIAFJ;AAIE,IAAA,KAAK,EAAE,uBAJT;AAKE,IAAA,OAAO,EAAE,uBALX;AAME,IAAA,WAAW,EAAE;AANf;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,kGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CANqC,CAQrC;;AACA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ,CADF;AAILC,IAAAA,QAAQ,EAAE,KAJL,CAIY;;AAJZ,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA;AAEA;AACA,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,kGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CAX4C,CAa5C;;AACA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAC1CiB,OAD0B,CAClB;AAAEb,IAAAA,GAAG,EAAEO;AAAP,GADkB,EAE1BN,OAF0B,EAA7B;AAIAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,GAAG,EAAE,gIADK;AAEVC,QAAAA,EAAE,EAAEV,QAFM;AAGVW,QAAAA,KAAK,EAAE,uBAHG;AAIVC,QAAAA,OAAO,EAAE,uBAJC;AAKVC,QAAAA,WAAW,EAAE;AALH;AADP,KADF;AAULC,IAAAA,UAAU,EAAE;AAVP,GAAP;AAYD","sourcesContent":["// localhost:3000/meetupId\r\nimport { MongoClient } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nexport default function MeetupDetails() {\r\n  return (\r\n    <MeetupDetail\r\n      img={\r\n        \"https://i.guim.co.uk/img/media/3f183e3024872dc0280012487854dc5807048166/0_42_3600_2160/master/3600.jpg?width=1140&dpr=2&s=none\"\r\n      }\r\n      title={\"Cristiano Celebrating\"}\r\n      address={\"Amir Gilbow, Tel Aviv\"}\r\n      description={\"First meetup\"}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Added only at dynamic paths. Define here all Dynamic Values for re-generate.\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    fallback: false, // Do you define all options? False -> yes\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // can fetch data securely. this code will not appear in client-side.\r\n  // This code will not appear even in other clients machines!\r\n\r\n  // fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const selectedMeetup = await meetupCollection\r\n    .findOne({ _id: meetupId })\r\n    .toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        img: \"https://i.guim.co.uk/img/media/3f183e3024872dc0280012487854dc5807048166/0_42_3600_2160/master/3600.jpg?width=1140&dpr=2&s=none\",\r\n        id: meetupId,\r\n        title: \"Cristiano Celebrating\",\r\n        address: \"Amir Gilbow, Tel Aviv\",\r\n        description: \"First meetup\",\r\n      },\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}