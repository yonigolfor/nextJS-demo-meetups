{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Play\\\\Desktop\\\\JSworks\\\\warmUp\\\\reactProjects\\\\next-meetup-project\\\\pages\\\\[meetupId]\\\\index.js\";\n// localhost:3000/meetupId\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nexport default function MeetupDetails({\n  meetupData\n}) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: meetupData.image,\n    title: meetupData.title,\n    address: meetupData.address,\n    description: meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  // Added only at dynamic paths. Define here all Dynamic Values for re-generate.\n  const client = await MongoClient.connect(\"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // take all the meetups ids\n\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false // Do you define all options? False -> yes\n\n  };\n}\nexport async function getStaticProps(context) {\n  // can fetch data securely. this code will not appear in client-side.\n  // This code will not appear even in other clients machines!\n  // fetch data for single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // take all the meetups ids\n\n  const selectedMeetup = await meetupCollection.findOne({\n    // convert to ObjectId because it's ObjectId at MongoDb.\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      // \"meetupData\" will be exposed as a prop to the component up there.\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    },\n    revalidate: 1\n  };\n}","map":{"version":3,"sources":["C:/Users/Play/Desktop/JSworks/warmUp/reactProjects/next-meetup-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","selectedMeetup","findOne","props","id","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAuC;AACpD,sBACE,QAAC,YAAD;AACE,IAAA,GAAG,EAAEA,UAAU,CAACC,KADlB;AAEE,IAAA,KAAK,EAAED,UAAU,CAACE,KAFpB;AAGE,IAAA,OAAO,EAAEF,UAAU,CAACG,OAHtB;AAIE,IAAA,WAAW,EAAEH,UAAU,CAACI;AAJ1B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,kGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CANqC,CAQrC;;AACA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ,CADF;AAILC,IAAAA,QAAQ,EAAE,KAJL,CAIY;;AAJZ,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA;AAEA;AACA,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,kGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CAX4C,CAa5C;;AACA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AACpD;AACAb,IAAAA,GAAG,EAAEhB,QAAQ,CAACuB,QAAD;AAFuC,GAAzB,CAA7B;AAKAd,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACL;AACA3B,MAAAA,UAAU,EAAE;AACV4B,QAAAA,EAAE,EAAEH,cAAc,CAACZ,GAAf,CAAmBQ,QAAnB,EADM;AAEVnB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHd;AAIVF,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAJZ;AAKVG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALlB;AAFP,KADF;AAWLyB,IAAAA,UAAU,EAAE;AAXP,GAAP;AAaD","sourcesContent":["// localhost:3000/meetupId\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nexport default function MeetupDetails({ meetupData }) {\r\n  return (\r\n    <MeetupDetail\r\n      img={meetupData.image}\r\n      title={meetupData.title}\r\n      address={meetupData.address}\r\n      description={meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Added only at dynamic paths. Define here all Dynamic Values for re-generate.\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    fallback: false, // Do you define all options? False -> yes\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // can fetch data securely. this code will not appear in client-side.\r\n  // This code will not appear even in other clients machines!\r\n\r\n  // fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const selectedMeetup = await meetupCollection.findOne({\r\n    // convert to ObjectId because it's ObjectId at MongoDb.\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      // \"meetupData\" will be exposed as a prop to the component up there.\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}