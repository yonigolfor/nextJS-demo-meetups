{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Play\\\\Desktop\\\\JSworks\\\\warmUp\\\\reactProjects\\\\next-meetup-project\\\\pages\\\\[meetupId]\\\\index.js\";\n// localhost:3000/meetupId\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nexport var __N_SSG = true;\nexport default function MeetupDetails(_ref) {\n  var meetupData = _ref.meetupData;\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: meetupData.image,\n    title: meetupData.title,\n    address: meetupData.address,\n    description: meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/Users/Play/Desktop/JSworks/warmUp/reactProjects/next-meetup-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","meetupData","image","title","address","description"],"mappings":";;AAAA;AAEA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,eAAe,SAASC,aAAT,OAAuC;AAAA,MAAdC,UAAc,QAAdA,UAAc;AACpD,sBACE,QAAC,YAAD;AACE,IAAA,GAAG,EAAEA,UAAU,CAACC,KADlB;AAEE,IAAA,KAAK,EAAED,UAAU,CAACE,KAFpB;AAGE,IAAA,OAAO,EAAEF,UAAU,CAACG,OAHtB;AAIE,IAAA,WAAW,EAAEH,UAAU,CAACI;AAJ1B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;KATuBL,a","sourcesContent":["// localhost:3000/meetupId\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nexport default function MeetupDetails({ meetupData }) {\r\n  return (\r\n    <MeetupDetail\r\n      img={meetupData.image}\r\n      title={meetupData.title}\r\n      address={meetupData.address}\r\n      description={meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Added only at dynamic paths. Define here all Dynamic Values for re-generate.\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    fallback: false, // Do you define all options? False -> yes\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // can fetch data securely. this code will not appear in client-side.\r\n  // This code will not appear even in other clients machines!\r\n\r\n  // fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://YoniGolfor:Yoni2023@cluster0.apmkq.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // take all the meetups ids\r\n  const selectedMeetup = await meetupCollection.findOne({\r\n    // convert to ObjectId because it's ObjectId at MongoDb.\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      // \"meetupData\" will be exposed as a prop to the component up there.\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}